{"ast":null,"code":"import _createForOfIteratorHelper from \"D:/MyPortfolio-master/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nexport function driver(style, styletron) {\n  var tx = renderDeclarativeRules(style, styletron);\n  return styletron.renderStyle(tx);\n}\nexport function getInitialStyle() {\n  return {};\n}\nexport function renderDeclarativeRules(style, styletron) {\n  for (var key in style) {\n    var val = style[key];\n    if (key === \"animationName\" && typeof val !== \"string\") {\n      style.animationName = styletron.renderKeyframes(val);\n      continue;\n    }\n    if (key === \"fontFamily\" && typeof val !== \"string\") {\n      if (Array.isArray(val)) {\n        var result = \"\";\n        var _iterator = _createForOfIteratorHelper(val),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var font = _step.value;\n            if (typeof font === \"object\") {\n              result += \"\".concat(styletron.renderFontFace(font), \",\");\n            } else if (typeof font === \"string\") {\n              result += \"\".concat(font, \",\");\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n        style.fontFamily = result.slice(0, -1);\n        continue;\n      } else if (val === void 0) {\n        continue;\n      } else {\n        style.fontFamily = styletron.renderFontFace(val);\n        continue;\n      }\n    }\n    if (typeof val === \"object\" && val !== null) {\n      renderDeclarativeRules(val, styletron);\n    }\n  }\n  return style;\n}","map":{"version":3,"names":["driver","style","styletron","tx","renderDeclarativeRules","renderStyle","getInitialStyle","key","val","animationName","renderKeyframes","Array","isArray","result","_iterator","_createForOfIteratorHelper","_step","s","n","done","font","value","concat","renderFontFace","err","e","f","fontFamily","slice"],"sources":["D:\\MyPortfolio-master\\node_modules\\styletron-standard\\dist-browser-esm\\src\\index.ts"],"sourcesContent":["import type {\n  Properties,\n  FontFace as FontFaceObject,\n  KeyframesObject,\n} from \"./style-types\";\n\nexport type {FontFaceObject, KeyframesObject};\n\nexport type StyleObject = Properties & {\n  [key in string]: Properties[keyof Properties] | StyleObject;\n};\n\nexport interface StandardEngine {\n  renderStyle(style: StyleObject): string;\n  renderKeyframes(keyframes: KeyframesObject): string;\n  renderFontFace(fontFace: FontFaceObject): string;\n}\n\nexport function driver(style: StyleObject, styletron: StandardEngine): string {\n  const tx = renderDeclarativeRules(style, styletron);\n  return styletron.renderStyle(tx);\n}\n\nexport function getInitialStyle(): StyleObject {\n  return {};\n}\n\nexport function renderDeclarativeRules(\n  style: StyleObject,\n  styletron: StandardEngine,\n) {\n  for (const key in style) {\n    const val = style[key];\n    if (key === \"animationName\" && typeof val !== \"string\") {\n      style.animationName = styletron.renderKeyframes(val as any);\n      continue;\n    }\n    if (key === \"fontFamily\" && typeof val !== \"string\") {\n      if (Array.isArray(val)) {\n        let result = \"\";\n        for (const font of val) {\n          if (typeof font === \"object\") {\n            result += `${styletron.renderFontFace(font as any)},`;\n          } else if (typeof font === \"string\") {\n            result += `${font},`;\n          }\n        }\n        style.fontFamily = result.slice(0, -1);\n        continue;\n      } else if (val === void 0) {\n        continue;\n      } else {\n        style.fontFamily = styletron.renderFontFace(val as any);\n        continue;\n      }\n    }\n    if (typeof val === \"object\" && val !== null) {\n      renderDeclarativeRules(val as StyleObject, styletron);\n    }\n  }\n  return style;\n}\n"],"mappings":";AAkBA,OAAO,SAASA,MAATA,CAAgBC,KAAhB,EAAoCC,SAApC,EAAuE;EAC5E,IAAMC,EAAE,GAAGC,sBAAsB,CAACH,KAAD,EAAQC,SAAR,CAAjC;EACA,OAAOA,SAAS,CAACG,WAAV,CAAsBF,EAAtB,CAAP;AACD;AAED,OAAO,SAASG,eAATA,CAAA,EAAwC;EAC7C,OAAO,EAAP;AACD;AAED,OAAO,SAASF,sBAATA,CACLH,KADK,EAELC,SAFK,EAGL;EACA,KAAK,IAAMK,GAAX,IAAkBN,KAAlB,EAAyB;IACvB,IAAMO,GAAG,GAAGP,KAAK,CAACM,GAAD,CAAjB;IACA,IAAIA,GAAG,KAAK,eAAR,IAA2B,OAAOC,GAAP,KAAe,QAA9C,EAAwD;MACtDP,KAAK,CAACQ,aAAN,GAAsBP,SAAS,CAACQ,eAAV,CAA0BF,GAA1B,CAAtB;MACA;IACD;IACD,IAAID,GAAG,KAAK,YAAR,IAAwB,OAAOC,GAAP,KAAe,QAA3C,EAAqD;MACnD,IAAIG,KAAK,CAACC,OAAN,CAAcJ,GAAd,CAAJ,EAAwB;QACtB,IAAIK,MAAM,GAAG,EAAb;QAAA,IAAAC,SAAA,GAAAC,0BAAA,CACmBP,GAAnB;UAAAQ,KAAA;QAAA;UAAA,KAAAF,SAAA,CAAAG,CAAA,MAAAD,KAAA,GAAAF,SAAA,CAAAI,CAAA,IAAAC,IAAA,GAAwB;YAAA,IAAbC,IAAX,GAAAJ,KAAA,CAAAK,KAAA;YACE,IAAI,OAAOD,IAAP,KAAgB,QAApB,EAA8B;cAC5BP,MAAM,OAAAS,MAAA,CAAOpB,SAAS,CAACqB,cAAV,CAAyBH,IAAzB,CAAsC,MAAnD;YACD,CAFD,MAEO,IAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;cACnCP,MAAM,OAAAS,MAAA,CAAOF,IAAK,MAAlB;YACD;UACF;QAAA,SAAAI,GAAA;UAAAV,SAAA,CAAAW,CAAA,CAAAD,GAAA;QAAA;UAAAV,SAAA,CAAAY,CAAA;QAAA;QACDzB,KAAK,CAAC0B,UAAN,GAAmBd,MAAM,CAACe,KAAP,CAAa,CAAb,EAAgB,CAAC,CAAjB,CAAnB;QACA;MACD,CAXD,MAWO,IAAIpB,GAAG,KAAK,KAAK,CAAjB,EAAoB;QACzB;MACD,CAFM,MAEA;QACLP,KAAK,CAAC0B,UAAN,GAAmBzB,SAAS,CAACqB,cAAV,CAAyBf,GAAzB,CAAnB;QACA;MACD;IACF;IACD,IAAI,OAAOA,GAAP,KAAe,QAAf,IAA2BA,GAAG,KAAK,IAAvC,EAA6C;MAC3CJ,sBAAsB,CAACI,GAAD,EAAqBN,SAArB,CAAtB;IACD;EACF;EACD,OAAOD,KAAP;AACD"},"metadata":{},"sourceType":"module","externalDependencies":[]}